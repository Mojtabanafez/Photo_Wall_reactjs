{"ast":null,"code":"import { database } from '../database/config';\nexport function startAddingPost(post) {\n  return dispatch => {\n    return database.ref('posts').update({\n      [post.id]: post\n    }).then(() => {\n      dispatch(addPost(post));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startLoadingPost() {\n  return dispatch => {\n    return database.ref('posts').once('value').then(snapshot => {\n      console.log(snap);\n      let posts = [];\n      snapshot.forEach(childSnapshot => {\n        posts.push(childSnapshot.val());\n      });\n      dispatch(loadPosts(posts));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startRemovingPosts(index, id) {\n  return dispatch => {\n    return database.ref(\"posts/\".concat(id)).remove().then(() => {\n      dispatch(removedPost(index));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function removedPost(index) {\n  return {\n    type: 'REMOVED_POST',\n    index: index\n  };\n}\nexport function addPost(post) {\n  return {\n    type: 'ADD_POST',\n    post: post\n  };\n}\nexport function loadPosts(posts) {\n  return {\n    type: 'LOAD_POSTS',\n    posts\n  };\n}\nexport function startAddingComment(comment, postId) {\n  return dispatch => {\n    return database.ref(\"comments/\".concat(postId)).push(comment).then(() => {\n      dispatch(addComment(comment, postId));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startLoadingComments() {\n  return dispatch => {\n    return database.ref('comments').once('value').then(snapshot => {\n      let comments = {};\n      snapshot.forEach(childSnapshot => {\n        comments[childSnapshot.key] = Object.values([childSnapshot.val()]);\n      });\n    });\n  };\n}\ne;\nexport function addComment(comment, postId) {\n  return {\n    type: 'ADD_COMMENT',\n    comment,\n    postId\n  };\n}","map":{"version":3,"sources":["/home/mojtaba/Desktop/PhotoWall/Photo_Wall_reactjs/src/redux/action.js"],"names":["database","startAddingPost","post","dispatch","ref","update","id","then","addPost","catch","error","console","log","startLoadingPost","once","snapshot","snap","posts","forEach","childSnapshot","push","val","loadPosts","startRemovingPosts","index","remove","removedPost","type","startAddingComment","comment","postId","addComment","startLoadingComments","comments","key","Object","values","e"],"mappings":"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","sourcesContent":["import { database } from '../database/config'\n\nexport function startAddingPost(post) {\n    return (dispatch) => {\n        return database.ref('posts').update({ [post.id]: post }).then(() => {\n            dispatch(addPost(post));\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nexport function startLoadingPost() {\n    return (dispatch) => {\n        return database.ref('posts').once('value').then((snapshot) => {\n            console.log(snap);\n            \n            let posts = [];\n            snapshot.forEach((childSnapshot) => {\n                posts.push(childSnapshot.val());\n            });\n            dispatch(loadPosts(posts));\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nexport function startRemovingPosts(index, id) {\n    return (dispatch) => {\n        return database.ref(`posts/${id}`).remove().then(() => {\n            dispatch(removedPost(index));\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n}\n\nexport function removedPost(index) {\n    return {\n        type: 'REMOVED_POST',\n        index: index\n    }\n}\n\nexport function addPost(post) {\n    return {\n        type: 'ADD_POST',\n        post: post\n    }\n}\nexport function loadPosts(posts) {\n    return {\n        type: 'LOAD_POSTS',\n        posts\n    }\n}\nexport function startAddingComment(comment, postId) {\n    return (dispatch) => {\n        return database.ref(`comments/${postId}`).push(comment).then(() => {\n            dispatch(addComment(comment, postId))\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n}\n\nexport function startLoadingComments() {\n    return (dispatch) => {\n        return database.ref('comments').once('value').then((snapshot) => {\n            let comments = {};\n            snapshot.forEach((childSnapshot) => {\n                comments[childSnapshot.key] = Object.values([childSnapshot.val()])\n            })\n        })\n    }\n}\ne\n\nexport function addComment(comment, postId) {\n    return {\n        type: 'ADD_COMMENT',\n        comment,\n        postId\n    }\n}"]},"metadata":{},"sourceType":"module"}