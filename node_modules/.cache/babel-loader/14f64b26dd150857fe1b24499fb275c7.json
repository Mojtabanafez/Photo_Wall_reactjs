{"ast":null,"code":"import { database } from '../database/config';\nexport function startAddingPost(postz) {\n  return dispatch => {\n    return database.ref('posts').update({\n      [post.id]: post\n    }).then(() => {\n      dispatch(addPost(post));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startAddingComment(comment, postId) {\n  return dispatch => {\n    return database.ref('comments').update({\n      [postId]: comment\n    }).then(() => {\n      dispatch;\n    });\n  };\n}\nexport function startLoadingPost() {\n  return dispatch => {\n    return database.ref('posts').once('value').then(snapshot => {\n      let posts = [];\n      snapshot.forEach(childSnapshot => {\n        posts.push(childSnapshot.val());\n      });\n      dispatch(loadPosts(posts));\n    });\n  };\n}\nexport function startRemovingPosts(index, id) {\n  return dispatch => {\n    return database.ref(\"posts/\".concat(id)).remove().then(() => {\n      dispatch(removedPost(index));\n    });\n  };\n}\nexport function removedPost(index) {\n  return {\n    type: 'REMOVED_POST',\n    index: index\n  };\n}\nexport function addPost(post) {\n  return {\n    type: 'ADD_POST',\n    post: post\n  };\n}\nexport function loadPosts(posts) {\n  return {\n    type: 'LOAD_POSTS',\n    posts\n  };\n}\nexport function addComment(comment, postId) {\n  return {\n    type: 'ADD_COMMENT',\n    comment,\n    postId\n  };\n}","map":{"version":3,"sources":["/home/mojtaba/Desktop/PhotoWall/Photo_Wall_reactjs/src/redux/action.js"],"names":["database","startAddingPost","postz","dispatch","ref","update","post","id","then","addPost","catch","error","console","log","startAddingComment","comment","postId","startLoadingPost","once","snapshot","posts","forEach","childSnapshot","push","val","loadPosts","startRemovingPosts","index","remove","removedPost","type","addComment"],"mappings":"AAAA,SAASA,QAAT,QAAyB,oBAAzB;AAEA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACnC,SAAQC,QAAD,IAAc;AACjB,WAAOH,QAAQ,CAACI,GAAT,CAAa,OAAb,EAAsBC,MAAtB,CAA6B;AAAE,OAACC,IAAI,CAACC,EAAN,GAAWD;AAAb,KAA7B,EAAkDE,IAAlD,CAAuD,MAAM;AAChEL,MAAAA,QAAQ,CAACM,OAAO,CAACH,IAAD,CAAR,CAAR;AACH,KAFM,EAEJI,KAFI,CAEGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAJM,CAAP;AAKH,GAND;AAOH;AACD,OAAO,SAASG,kBAAT,CAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;AAChD,SAAQb,QAAD,IAAY;AACf,WAAOH,QAAQ,CAACI,GAAT,CAAa,UAAb,EAAyBC,MAAzB,CAAgC;AAAC,OAACW,MAAD,GAASD;AAAV,KAAhC,EAAoDP,IAApD,CAAyD,MAAI;AAChEL,MAAAA,QAAQ;AACX,KAFM,CAAP;AAGH,GAJD;AAMH;AACD,OAAO,SAASc,gBAAT,GAA4B;AAC/B,SAAQd,QAAD,IAAc;AACjB,WAAOH,QAAQ,CAACI,GAAT,CAAa,OAAb,EAAsBc,IAAtB,CAA2B,OAA3B,EAAoCV,IAApC,CAA0CW,QAAD,IAAc;AAC1D,UAAIC,KAAK,GAAG,EAAZ;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAkBC,aAAD,IAAmB;AAChCF,QAAAA,KAAK,CAACG,IAAN,CAAWD,aAAa,CAACE,GAAd,EAAX;AACH,OAFD;AAGArB,MAAAA,QAAQ,CAACsB,SAAS,CAACL,KAAD,CAAV,CAAR;AACH,KANM,CAAP;AAOH,GARD;AASH;AAED,OAAO,SAASM,kBAAT,CAA4BC,KAA5B,EAAmCpB,EAAnC,EAAsC;AACzC,SAAQJ,QAAD,IAAY;AACf,WAAOH,QAAQ,CAACI,GAAT,iBAAsBG,EAAtB,GAA4BqB,MAA5B,GAAqCpB,IAArC,CAA0C,MAAI;AACjDL,MAAAA,QAAQ,CAAC0B,WAAW,CAACF,KAAD,CAAZ,CAAR;AACH,KAFM,CAAP;AAGH,GAJD;AAMH;AAED,OAAO,SAASE,WAAT,CAAqBF,KAArB,EAA4B;AAC/B,SAAO;AACHG,IAAAA,IAAI,EAAE,cADH;AAEHH,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH;AAED,OAAO,SAASlB,OAAT,CAAiBH,IAAjB,EAAuB;AAC1B,SAAO;AACHwB,IAAAA,IAAI,EAAE,UADH;AAEHxB,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH;AAED,OAAO,SAASmB,SAAT,CAAmBL,KAAnB,EAAyB;AAC5B,SAAO;AACHU,IAAAA,IAAI,EAAE,YADH;AAEHV,IAAAA;AAFG,GAAP;AAIH;AAGD,OAAO,SAASW,UAAT,CAAoBhB,OAApB,EAA6BC,MAA7B,EAAoC;AACvC,SAAO;AACHc,IAAAA,IAAI,EAAE,aADH;AAEHf,IAAAA,OAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["import { database } from '../database/config'\n\nexport function startAddingPost(postz) {\n    return (dispatch) => {\n        return database.ref('posts').update({ [post.id]: post }).then(() => {\n            dispatch(addPost(post))\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\nexport function startAddingComment(comment, postId) {\n    return (dispatch)=>{\n        return database.ref('comments').update({[postId]:comment}).then(()=>{\n            dispatch\n        })\n    }\n\n}\nexport function startLoadingPost() {\n    return (dispatch) => {\n        return database.ref('posts').once('value').then((snapshot) => {\n            let posts = []\n            snapshot.forEach((childSnapshot) => {\n                posts.push(childSnapshot.val())\n            });\n            dispatch(loadPosts(posts))\n        })\n    }\n}\n\nexport function startRemovingPosts(index, id){\n    return (dispatch)=>{\n        return database.ref(`posts/${id}`).remove().then(()=>{\n            dispatch(removedPost(index));\n        })\n    }\n\n}\n\nexport function removedPost(index) {\n    return {\n        type: 'REMOVED_POST',\n        index: index\n    }\n}\n\nexport function addPost(post) {\n    return {\n        type: 'ADD_POST',\n        post: post\n    }\n}\n\nexport function loadPosts(posts){\n    return {\n        type: 'LOAD_POSTS',\n        posts\n    }\n}\n\n\nexport function addComment(comment, postId){\n    return {\n        type: 'ADD_COMMENT',\n        comment,\n        postId\n    }\n}\n"]},"metadata":{},"sourceType":"module"}